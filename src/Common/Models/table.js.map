{"version":3,"sources":["table.es6"],"names":[],"mappings":"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","file":"table.js","sourcesContent":["let response = require(\"./response\");\r\nlet tableConfig = require(\"./tableConfig\");\r\nlet fs = require(\"fs\");\r\n\r\nmodule.exports = {\r\n    init: (req, res, config)=> {\r\n        response.success(res, config.columns);\r\n    },\r\n    create: (req, res, config)=> {\r\n        //find table struct\r\n        let tableStruct = global.dbStruct.find(d=> {\r\n            return d.id == table;\r\n        });\r\n        if (tableStruct == undefined) {\r\n            response.fail(res, \"unknown table\");\r\n            return;\r\n        }\r\n\r\n        //columns exclude id\r\n        let noIdFields = tableStruct.fields.filter(d=> {\r\n            return d.Field != \"id\";\r\n        });\r\n\r\n        //add every row by param requestRowsLength\r\n        let rowArr = [];\r\n        for (let i = 0; i < req.body.requestRowsLength; i++) {\r\n            let row = \"(\";\r\n            row += noIdFields.map(d=> {\r\n                let id = d.Field;\r\n                let type = d.Type;\r\n                let value;\r\n\r\n                if (config.hasOwnProperty(\"create\")) {\r\n                    //if default value exist\r\n\r\n                } else {\r\n                    //if default value do not exist\r\n\r\n                }\r\n\r\n                let defaultValue = defaultValues.filter(d=> {\r\n                    return d.tableName == table;\r\n                });\r\n                if (defaultValue.length != 0 && defaultValue[0][id]) {\r\n                    value = defaultValue[0][id];\r\n                } else {\r\n                    value = req.body[id][i];\r\n                    if (!type.includes(\"int\") && type != \"float\" && type != \"double\") {\r\n                        value = \"'\" + value + \"'\";\r\n                    }\r\n                }\r\n                return value;\r\n            }).join(\",\");\r\n            row += \")\";\r\n            rowArr.push(row);\r\n        }\r\n\r\n        //build sqlCommand\r\n        let columnIdSqlStr = noIdFields.map(d=> {\r\n            return d.Field;\r\n        }).filter(d=> {\r\n            //if default value exist and is undefined,then exclude it\r\n            if (config.hasOwnProperty(\"create\") && config.create.hasOwnProperty(d) && config.create.d == undefined) {\r\n                return false;\r\n            }else{\r\n                return true;\r\n            }\r\n        }).join(\",\");\r\n        columnIdSqlStr = `(${columnIdSqlStr})`;\r\n        let valuesSqlStr = rowArr.join(\",\");\r\n\r\n        let sqlCommand = `insert into ${table} ${columnIdSqlStr} values ${valuesSqlStr}`;\r\n\r\n        global.mysql.excuteQuery(sqlCommand, {}).then(d=> {\r\n            response.success(res);\r\n        }).catch(d=> {\r\n            console.log(\"mysql excuteQuery error:\" + d);\r\n            console.log(sqlCommand);\r\n            console.log(values);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    update: (req, res, table, map)=> {\r\n        let [sqlCommandArr, valuesArr] = [map.sqlCommand, map.values];\r\n        let promiseArr = [];\r\n        for (let i = 0; i < sqlCommandArr.length; i++) {\r\n            let sqlCommand = sqlCommandArr[i];\r\n            let values = valuesArr[i];\r\n            promiseArr.push(global.mysql.excuteQuery(sqlCommand, values));\r\n        }\r\n        Promise.all(promiseArr).then(d=> {\r\n            response.success(res);\r\n        }).catch(d=> {\r\n            console.log(\"mysql excuteQuery error:\" + d);\r\n            console.log(sqlCommandArr);\r\n            console.log(valuesArr);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    read: (req, res, table, map)=> {\r\n        let {sqlCommand, values} = map;\r\n        global.mysql.excuteQuery(sqlCommand, values).then(d=> {\r\n            d = tableMap.dataMap(table, d);\r\n            response.success(res, d);\r\n        }).catch(d=> {\r\n            console.log(\"mysql excuteQuery error:\" + d);\r\n            console.log(sqlCommand);\r\n            console.log(values);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    delete: (req, res, table)=> {\r\n        let sqlCommand = \"delete from \" + table + \" where id in (\" + req.body.id + \")\";\r\n        global.mysql.excuteQuery(sqlCommand, {}).then(d=> {\r\n            response.success(res, d);\r\n        }).catch(d=> {\r\n            console.log(\"mysql excuteQuery error:\" + d);\r\n            console.log(sqlCommand);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    attachmentRead: (req, res, table)=> {\r\n        let path = \"./client/data/\" + table + \"/\" + req.body.id + \"/\";\r\n        if (fs.existsSync(path)) {\r\n            let attachementList = fs.readdirSync(path);\r\n            attachementList = attachementList.map(d=> {\r\n                d = d.base64Encode();\r\n                return d;\r\n            });\r\n            response.success(res, attachementList);\r\n        } else {\r\n            response.success(res, []);\r\n        }\r\n    },\r\n    attachmentDelete: (req, res, table)=> {\r\n        let name = req.body.name;\r\n        let path = \"./client/data/\" + table + \"/\" + req.body.id + \"/\";\r\n        if (fs.existsSync(path)) {\r\n            fs.unlinkSync(path + name);\r\n            response.success(res);\r\n        } else {\r\n            response.fail(res, \"dir do not exist\");\r\n        }\r\n\r\n    },\r\n    attachmentUpload: (req, res, table)=> {\r\n        if (req.files.length == 0) {\r\n            response.fail(\"no file\");\r\n            return;\r\n        }\r\n        let sourcePath = \"./server/upload/\";\r\n        let destPath = \"./client/data/\" + table + \"/\";\r\n        if (!fs.existsSync(destPath)) {\r\n            fs.mkdirSync(destPath);\r\n        }\r\n        destPath += req.query.id + \"/\";\r\n        if (!fs.existsSync(destPath)) {\r\n            fs.mkdirSync(destPath);\r\n        }\r\n        req.files.forEach(d=> {\r\n            let filename = d.filename;\r\n            fs.renameSync(sourcePath + filename, destPath + filename);\r\n        });\r\n        response.success(res);\r\n    },\r\n};"]}