{"version":3,"sources":["table.es6"],"names":[],"mappings":"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","file":"table.js","sourcesContent":["let response = require(\"./response\");\r\nlet fs = require(\"fs\");\r\n\r\nmodule.exports = {\r\n    init: (req, res, config)=> {\r\n        response.success(res, config.columns);\r\n    },\r\n    create: (req, res, config)=> {\r\n        let table = config.id;\r\n        //find table struct\r\n        let tableStruct = global.dbStruct.find(d=> {\r\n            return d.id == table;\r\n        });\r\n        if (tableStruct == undefined) {\r\n            response.fail(res, \"unknown table\");\r\n            return;\r\n        }\r\n\r\n        //columns exclude id\r\n        let noIdFields = tableStruct.fields.filter(d=> {\r\n            return d.Field != \"id\";\r\n        });\r\n\r\n        //add every row by param requestRowsLength\r\n        let rowArr = [];\r\n        for (let i = 0; i < req.body.requestRowsLength; i++) {\r\n            let row = \"(\";\r\n            row += noIdFields.filter(d=> {\r\n                //filter default undefined value\r\n                let id = d.Field;\r\n                if (config.hasOwnProperty(\"create\") && config.create.hasOwnProperty(id) && config.create[id] == undefined) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }).map(d=> {\r\n                let id = d.Field;\r\n                let type = d.Type;\r\n                let value;\r\n                if (config.hasOwnProperty(\"create\") && config.create.hasOwnProperty(id)) {\r\n                    //if default value exist and default value has property id\r\n                    value = config.create[id];\r\n                } else {\r\n                    //if default value do not exist\r\n                    value = req.body[id][i];\r\n                    if (!type.includes(\"int\") && type != \"float\" && type != \"double\") {\r\n                        value = \"'\" + value + \"'\";\r\n                    }\r\n                }\r\n                return value;\r\n            }).join(\",\");\r\n            row += \")\";\r\n            rowArr.push(row);\r\n        }\r\n\r\n        //build sqlCommand\r\n        let columnIdSqlStr = noIdFields.map(d=> {\r\n            return d.Field;\r\n        }).filter(d=> {\r\n            //if default value exist and is undefined,then exclude it\r\n            if (config.hasOwnProperty(\"create\") && config.create.hasOwnProperty(d) && config.create.d == undefined) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }).join(\",\");\r\n        columnIdSqlStr = `(${columnIdSqlStr})`;\r\n        let valuesSqlStr = rowArr.join(\",\");\r\n\r\n        //do mysql excute\r\n        let sqlCommand = `insert into ${table} ${columnIdSqlStr} values ${valuesSqlStr}`;\r\n        global.mysql.excuteQuery(sqlCommand).then(d=> {\r\n            global.log.table.info(\"create done:\" + sqlCommand);\r\n            response.success(res);\r\n        }).catch(d=> {\r\n            global.log.error.info(\"mysql excuteQuery error:\" + d);\r\n            global.log.error.info(sqlCommand);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    update: (req, res, config)=> {\r\n        let table = config.id;\r\n        //find table struct\r\n        let tableStruct = global.dbStruct.find(d=> {\r\n            return d.id == table;\r\n        });\r\n        if (tableStruct == undefined) {\r\n            response.fail(res, \"unknown table\");\r\n            return;\r\n        }\r\n\r\n        //columns exclude id\r\n        let noIdFields = tableStruct.fields.filter(d=> {\r\n            return d.Field != \"id\";\r\n        });\r\n\r\n        let promiseArr = [];\r\n        let sqlCommandArr = [];\r\n        let valuesArr = [];\r\n        for (let i = 0; i < req.body.requestRowsLength; i++) {\r\n            let sqlCommand = `update ${config.id} set ? where id=${req.body.id[i]}`;\r\n            let values = {};\r\n            noIdFields.filter(d=> {\r\n                //filter default undefined value\r\n                let id = d.Field;\r\n                if (config.hasOwnProperty(\"update\") && config.update.hasOwnProperty(id) && config.update[id] == undefined) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            }).forEach(d=> {\r\n                let id = d.Field;\r\n                if (config.hasOwnProperty(\"update\") && config.update.hasOwnProperty(id)) {\r\n                    //if default value exist and default value has property id\r\n                    values[id] = config.create[id];\r\n                } else {\r\n                    //if default value do not exist\r\n                    values[id] = req.body[id][i];\r\n                }\r\n            });\r\n            promiseArr.push(global.mysql.excuteQuery(sqlCommand, values));\r\n            sqlCommandArr.push(sqlCommand);\r\n            valuesArr.push(values);\r\n        }\r\n\r\n        Promise.all(promiseArr).then(d=> {\r\n            global.log.table.info(\"update done:\");\r\n            for (let i = 0; i < sqlCommandArr.length; i++) {\r\n                global.log.table.info(`update ${i} ${sqlCommandArr[i]}`);\r\n                global.log.table.info(valuesArr[i]);\r\n            }\r\n            response.success(res);\r\n        }).catch(d=> {\r\n            global.log.error.info(\"mysql excuteQuery error:\" + d);\r\n            for (let i = 0; i < sqlCommandArr.length; i++) {\r\n                global.log.error.info(`update ${i} ${sqlCommandArr[i]}`);\r\n                global.log.error.info(valuesArr[i]);\r\n            }\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    read: (req, res, config)=> {\r\n        let table = config.id;\r\n        let sqlCommand = config.hasOwnProperty(\"read\") ?\r\n            (typeof(config.read) == \"function\" ? config.read(req) : config.read) : `select * from ${table}`;\r\n        let values = config.hasOwnProperty(\"readValue\") ?\r\n            config.readValue : {};\r\n        global.mysql.excuteQuery(sqlCommand, values).then(d=> {\r\n            if (config.hasOwnProperty(\"readMap\")) {\r\n                d = d.map(d1=> {\r\n                    d1 = config.readMap(d1);\r\n                    return d1;\r\n                });\r\n            }\r\n            global.log.table.info(\"read done:\" + sqlCommand);\r\n            global.log.table.info(values);\r\n            response.success(res, d);\r\n        }).catch(d=> {\r\n            global.log.error.info(\"mysql excuteQuery error:\" + d);\r\n            global.log.error.info(sqlCommand);\r\n            global.log.error.info(values);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    delete: (req, res, config)=> {\r\n        let table = config.id;\r\n        let idStr = req.body.id.join(\",\");\r\n        let sqlCommand = `delete from ${table} where id in (${idStr})`;\r\n        global.mysql.excuteQuery(sqlCommand).then(d=> {\r\n            global.log.table.info(\"delete done:\" + sqlCommand);\r\n            response.success(res, d);\r\n        }).catch(d=> {\r\n            global.log.error.info(\"mysql excuteQuery error:\" + d);\r\n            global.log.error.info(sqlCommand);\r\n            response.fail(res, \"mysql excuteQuery error\");\r\n        });\r\n    },\r\n    attachmentRead: (req, res, config)=> {\r\n        let table = config.id;\r\n        let path = `./client/data/${table}/${req.body.id}/`;\r\n        if (fs.existsSync(path)) {\r\n            let attachementList = fs.readdirSync(path);\r\n            response.success(res, attachementList);\r\n        } else {\r\n            response.success(res, []);\r\n        }\r\n    },\r\n    attachmentDelete: (req, res, config)=> {\r\n        let table = config.id;\r\n        let path = `./client/data/${table}/${req.body.id}/`;\r\n        let name = req.body.name;\r\n        if (fs.existsSync(path)) {\r\n            fs.unlinkSync(path + name);\r\n            response.success(res);\r\n        } else {\r\n            response.fail(res, \"dir do not exist\");\r\n        }\r\n    },\r\n    attachmentUpload: (req, res, config)=> {\r\n        if (req.files.length == 0) {\r\n            response.fail(\"no file upload\");\r\n            return;\r\n        }\r\n        let table = config.id;\r\n        let sourcePath = \"./server/upload/\";\r\n        let destPath = `./client/data/${table}/`;\r\n        if (!fs.existsSync(destPath)) {\r\n            fs.mkdirSync(destPath);\r\n        }\r\n        destPath += req.query.id + \"/\";\r\n        if (!fs.existsSync(destPath)) {\r\n            fs.mkdirSync(destPath);\r\n        }\r\n        req.files.forEach(d=> {\r\n            let filename = d.filename;\r\n            fs.renameSync(sourcePath + filename, destPath + filename);\r\n            global.log.upload.info(\"upload done:\" + destPath + filename);\r\n        });\r\n        response.success(res);\r\n    },\r\n};"]}