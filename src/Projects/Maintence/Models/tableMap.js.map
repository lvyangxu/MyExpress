{"version":3,"sources":["tableMap.es6"],"names":[],"mappings":"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","file":"tableMap.js","sourcesContent":["module.exports = {\r\n    dataMap: (table, d)=> {\r\n        switch (table) {\r\n            case \"getGames\":\r\n                d = d.map(d1=> {\r\n                    return d1.name;\r\n                });\r\n                break;\r\n            case \"getPublishers\":\r\n                d = d.map(d1=> {\r\n                    return d1.publisher;\r\n                });\r\n                break;\r\n            case \"getDevelopers\":\r\n                d = d.map(d1=> {\r\n                    return d1.developer;\r\n                });\r\n                break;\r\n        }\r\n        return d;\r\n    },\r\n    init: (table)=> {\r\n        let d = [];\r\n        switch (table) {\r\n            case \"server_info\":\r\n                d = [\r\n                    {id: \"id\", name: \"id\", checked: false},\r\n                    {id: \"serverRoom\", name: \"公司名称\", checked: true},\r\n                    {id: \"businessType\", name: \"业务类型\", checked: true},\r\n                    {id: \"area\", name: \"业务地区\", checked: true},\r\n                    {id: \"address\", name: \"所在地\", checked: true},\r\n                    {id: \"productType\", name: \"主要产品类型\", checked: true},\r\n                    {id: \"contactMan\", name: \"联系人\", checked: true},\r\n                    {id: \"duty\", name: \"职位\", checked: true},\r\n                    {id: \"contactWay\", name: \"联系方式\", checked: true},\r\n                    {id: \"website\", name: \"网站\", checked: true},\r\n                    {id: \"appannie\", name: \"App Annie\", checked: true},\r\n                    {id: \"manager\", name: \"负责人\", checked: true},\r\n                    {id: \"note\", name: \"备注\", checked: true}\r\n                ];\r\n                break;\r\n        }\r\n        return d;\r\n    },\r\n    create: (req, res, table)=> {\r\n        let sqlCommand = \"\";\r\n        let tableStruct = global.dbStruct.filter(d=> {\r\n            return d.id == table;\r\n        });\r\n        if (tableStruct.length != 0) {\r\n            let defaultValues = [{tableName: \"game\", createTime: \"now()\", updateTime: \"now()\"}];\r\n\r\n            let fields = tableStruct[0].fields;\r\n            let noIdFields = fields.filter(d=> {\r\n                return d.Field != \"id\";\r\n            });\r\n            let columnNameStr = noIdFields.map(d=> {\r\n                return d.Field;\r\n            }).join(\",\");\r\n            let rowLengthArr = [];\r\n            for (let i = 0; i < req.body.requestRowsLength; i++) {\r\n                rowLengthArr.push(i);\r\n            }\r\n            let rowValueStr = rowLengthArr.map(i=> {\r\n                let row = \"(\";\r\n                row += noIdFields.map(d=> {\r\n                    let id = d.Field;\r\n                    let type = d.Type;\r\n                    let value;\r\n                    let defaultValue = defaultValues.filter(d=> {\r\n                        return d.tableName == table;\r\n                    });\r\n                    if (defaultValue.length != 0 && defaultValue[0][id]) {\r\n                        value = defaultValue[0][id];\r\n                    } else {\r\n                        value = req.body[id].split(\",\")[i];\r\n                        if (!type.includes(\"int\") && type != \"float\" && type != \"double\") {\r\n                            value = \"'\" + value + \"'\";\r\n                        }\r\n                    }\r\n                    return value;\r\n                }).join(\",\");\r\n                row += \")\";\r\n                return row;\r\n            }).join(\",\");\r\n            sqlCommand = \"insert into \" + table + \" (\" + columnNameStr + \") values \" + rowValueStr;\r\n        }\r\n        return {sqlCommand: sqlCommand, values: {}};\r\n    },\r\n    update: (req, res, table)=> {\r\n        let sqlCommandArr = [];\r\n        let valuesArr = [];\r\n        let tableStruct = global.dbStruct.filter(d=> {\r\n            return d.id == table;\r\n        });\r\n        if (tableStruct.length != 0) {\r\n            let defaultValues = [{tableName: \"game\", createTime: null, updateTime: \"now()\"}];\r\n\r\n            let fields = tableStruct[0].fields;\r\n            let noIdFields = fields.filter(d=> {\r\n                return d.Field != \"id\";\r\n            });\r\n            let rowLengthArr = [];\r\n            for (let i = 0; i < req.body.requestRowsLength; i++) {\r\n                rowLengthArr.push(i);\r\n            }\r\n            rowLengthArr.forEach(i=> {\r\n                let defaultStrArr = [];\r\n                let values = {};\r\n                noIdFields.forEach(d=> {\r\n                    let id = d.Field;\r\n                    let value;\r\n                    let defaultValue = defaultValues.filter(d=> {\r\n                        return d.tableName == table;\r\n                    });\r\n                    if (defaultValue.length != 0) {\r\n                        if (defaultValue[0].hasOwnProperty(id)) {\r\n                            value = defaultValue[0][id];\r\n                            if (value != null) {\r\n                                defaultStrArr.push(id + \"=\" + value);\r\n                            }\r\n                        } else {\r\n                            value = req.body[id].split(\",\")[i];\r\n                            values[id] = value;\r\n                        }\r\n                    } else {\r\n                        value = req.body[id].split(\",\")[i];\r\n                        values[id] = value;\r\n                    }\r\n                });\r\n                let defaultStr = defaultStrArr.join(\",\");\r\n                let valueKeyLength = 0;\r\n                for (let k in values) {\r\n                    valueKeyLength++;\r\n                }\r\n\r\n                if (defaultStrArr.length != 0 && valueKeyLength != 0) {\r\n                    defaultStr = defaultStr + \",\";\r\n                }\r\n                let sqlCommand = \"update \" + table + \" set \" + defaultStr + \"? where id=\" + req.body.id.split(\",\")[i];\r\n                sqlCommandArr.push(sqlCommand);\r\n                valuesArr.push(values);\r\n            });\r\n        }\r\n        return {sqlCommand: sqlCommandArr, values: valuesArr};\r\n    },\r\n    read: (req, res, table)=> {\r\n        let sqlCommand = \"\";\r\n        let values = {};\r\n        switch (table) {\r\n            default:\r\n                sqlCommand = \"select * from \" + table;\r\n                break;\r\n        }\r\n        return {sqlCommand: sqlCommand, values: values};\r\n    },\r\n    delete: (req, res, table)=> {\r\n\r\n    },\r\n    attachmentRead: (req, res, table)=> {\r\n\r\n    },\r\n    attachmentDelete: (req, res, table)=> {\r\n\r\n    },\r\n    attachmentUpload: (req, res, table)=> {\r\n\r\n    },\r\n};"]}